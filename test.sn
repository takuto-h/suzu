
write_line("hello, world.")


def fac(n):
  if(n == 0):
    1
  else:
    n * fac(n - 1)
  end
end

write_line("fac(10) = {0}", fac(10))


class UgradStudent = make_ugrad_student:
  name
  college
  mutable grade
end

def me = make_ugrad_student("Takuto Hayashi", "College of Information Science", 3)
write_line("{0}", me.name) //=> Takuto Hayashi
write_line("{0}", me.college) //=> College of Information Science
write_line("{0}", me.grade) //=> 3

def UgradStudent#promote(self):
  if(self.grade < 4):
    self.grade = self.grade + 1
  end
  self.grade
end

me.promote
write_line("{0}", me.grade) //=> 4

trait Student(C, C#name, C#department):
  def C#introduce_oneself(self):
    write_line("My name is {0}. I'm a member of {1}.", self.name, self.department)
  end

  export C#introduce_oneself
end

class GradStudent = make_grad_student:
  name
  school
  mutable grade
end

def taro = make_grad_student("Taro Tsukuba", "Graduate School of Systems and Information Engineering", 1)

open Student(UgradStudent, UgradStudent#name, UgradStudent#college)
open Student(GradStudent, GradStudent#name, GradStudent#school)

me.introduce_oneself //=> My name is Takuto Hayashi. I'm a member of College of Information Science.
taro.introduce_oneself //=> My name is Taro Tsukuba. I'm a member of Graduate School of Systems and Information Engineering.


module List:
  class C:
    def Nil()
    def Cons(x, xs)
  end

  def append(lst1, lst2):
    match(lst1):
    case(Nil()):
      lst2
    case(Cons(x, xs)):
      Cons(x, append(xs, lst2))
    end
  end

  module Open:
    def C#(+) = append

    def C#to_string(self):
      match(self):
      case(Nil()):
        "[]"
      case(Cons(x,xs)):
        String::format("{0}::{1}", x, xs)
      end
    end

    export C#(+), C#to_string
  end

  export C, Nil, Cons, append, Open
end

open List::Open

def nil = List::Nil()
def cons = List::Cons
def lst1 = cons(1, cons(2, cons(3, nil)))
def lst2 = cons(4, cons(5, cons(6, nil)))

write_line("{0}", lst1) //=> 1::2::3::[]
write_line("{0}", lst2) //=> 4::5::6::[]
write_line("{0}", lst1 + lst2) //=> 1::2::3::4::5::6::[]


trait Account(C, C#balance, C#(balance=)):
  def C#deposit(self, x):
    self.balance = self.balance + x
  end

  def C#withdraw(self, x):
    self.balance = self.balance - x
    if(self.balance < 0):
      self.balance = 0
    end
  end

  export C#deposit, C#withdraw
end

class BankAccount = make_bank_account:
  mutable balance
end

open Account(BankAccount, BankAccount#balance, BankAccount#(balance=))

def create_bank_account():
  make_bank_account(0)
end

def account = create_bank_account()

account.balance = 200
write_line("{0}(200)", account.balance)
account.deposit(50)
write_line("{0}(250)", account.balance)
account.withdraw(100)
write_line("{0}(150)", account.balance)
account.withdraw(200)
write_line("{0}(0)", account.balance)

class StockAccount = make_stock_account:
  mutable num_shares
  mutable price_per_share
end

def StockAccount#balance(self):
  self.num_shares * self.price_per_share
end

def StockAccount#(balance=)(self, x):
  self.num_shares = x / self.price_per_share
end

open Account(StockAccount, StockAccount#balance, StockAccount#(balance=))

def create_stock_account():
  make_stock_account(10, 30)
end

def stock = create_stock_account()

write_line("{0}(10)", stock.num_shares)
write_line("{0}(30)", stock.price_per_share)
write_line("{0}(300)", stock.balance)
stock.balance = 150
write_line("{0}(5)", stock.num_shares)

stock.balance = 600
write_line("{0}(600)", stock.balance)
write_line("{0}(20)", stock.num_shares)
stock.deposit(60)
write_line("{0}(660)", stock.balance)
write_line("{0}(22)", stock.num_shares)

class Point = make_point:
  x
  y
end

def p1 = make_point(1, 2)
def p2 = make_point(1, 2)
def p3 = make_point(2, 2)

module Temp:
  def Point#(==)(self, other):
    self.x == other.x && self.y == other.y
  end

  write_line("{0}", p1 == p2) //=> true
  write_line("{0}", p2 == p3) //=> false
end

//write_line("{0}", p1 == p2) //=> <error>
