
write_line("hello, world.")


def fac(n):
  if(n == 0):
    1
  else:
    n * fac(n - 1)

write_line("fac(10) = {0}", fac(10))


class UgradStudent = make_ugrad_student:
  name
  college
  mutable grade

def me = make_ugrad_student("Takuto Hayashi", "College of Information Science", 3)
write_line("me.name = {0}", me.name)
write_line("me.college = {0}", me.college)
write_line("me.grade = {0}", me.grade)

def UgradStudent#promote(self):
  when(self.grade < 4):
    self.grade = self.grade + 1
  self.grade

write_line("me.promote = {0}", me.promote)

trait Student(C, C#name, C#department):
  def C#introduce_oneself(self):
    write_line("My name is {0}. I'm a member of {1}.", self.name, self.department)
  export C#introduce_oneself

class GradStudent = make_grad_student:
  name
  school
  mutable grade

def taro = make_grad_student("Taro Tsukuba", "Graduate School of Systems and Information Engineering", 1)

open Student(UgradStudent, UgradStudent#name, UgradStudent#college)
open Student(GradStudent, GradStudent#name, GradStudent#school)

me.introduce_oneself
taro.introduce_oneself


module List:
  class C:
    def Nil()
    def Cons(x, xs)

  def append(lst1, lst2):
    match(lst1):
    case(Nil()):
      lst2
    case(Cons(x, xs)):
      Cons(x, append(xs, lst2))

  module Open:
    def C#(+) = append

    def C#to_string(self):
      match(self):
      case(Nil()):
        "[]"
      case(Cons(x,xs)):
        String:format("{0}::{1}", x, xs)

    export C#(+), C#to_string

  export C, Nil, Cons, append, Open

open List:Open

def nil = List:Nil()
def cons = List:Cons
def lst1 = cons(1, cons(2, cons(3, nil)))
def lst2 = cons(4, cons(5, cons(6, nil)))

write_line("{0}", lst1)
write_line("{0}", lst2)
write_line("{0}", lst1 + lst2)


trait Account(C, C#balance, C#(balance=)):
  def C#deposit(self, x):
    self.balance = self.balance + x

  def C#withdraw(self, x):
    self.balance = self.balance - x
    when(self.balance < 0):
      self.balance = 0

  export C#deposit, C#withdraw

class BankAccount = make_bank_account:
  mutable balance

open Account(BankAccount, BankAccount#balance, BankAccount#(balance=))

def create_bank_account():
  make_bank_account(0)

def account = create_bank_account()

account.balance = 200
write_line("{0}(200)", account.balance)
account.deposit(50)
write_line("{0}(250)", account.balance)
account.withdraw(100)
write_line("{0}(150)", account.balance)
account.withdraw(200)
write_line("{0}(0)", account.balance)

class StockAccount = make_stock_account:
  mutable num_shares
  mutable price_per_share

def StockAccount#balance(self):
  self.num_shares * self.price_per_share

def StockAccount#(balance=)(self, x):
  self.num_shares = x / self.price_per_share

open Account(StockAccount, StockAccount#balance, StockAccount#(balance=))

def create_stock_account():
  make_stock_account(10, 30)

def stock = create_stock_account()

write_line("{0}(10)", stock.num_shares)
write_line("{0}(30)", stock.price_per_share)
write_line("{0}(300)", stock.balance)
stock.balance = 150
write_line("{0}(5)", stock.num_shares)

stock.balance = 600
write_line("{0}(600)", stock.balance)
write_line("{0}(20)", stock.num_shares)
stock.deposit(60)
write_line("{0}(660)", stock.balance)
write_line("{0}(22)", stock.num_shares)
