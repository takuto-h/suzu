
module Unit:
  class C
  export C
end

module Bool:
  class C
  export C
end

module Int:
  class C
  export C
end

module Float:
  class C
  let from_string = Builtin::float_from_string
  export C, from_string
end

module Char:
  class C

  let code = Builtin::char_code

  def digit?(c):
    String::contain?("0123456789", c)
  end

  def digit_to_int(c):
    code(c) - code('0')
  end
  
  export C, code, digit?, digit_to_int
end

module String:
  class C

  let get = Builtin::string_get
  let length = Builtin::string_length
  let contain? = Builtin::string_contain?
  
  module Format:
    exception Illegal_format()
    
    class insn:
      def String(str)
      def Placeholder(n)
    end
    
    let initial_unformatted_buffer_size = 16
    let initial_formatted_buffer_size = 256

    def parse_format_insns(strm, rev_insns):
      match(Stream::peek(strm)):
      case(Some('{')):
        Stream::junk(strm)
        if(Stream::peek(strm) == Some('{')):
          parse_string(strm, '{', rev_insns)
        else:
          parse_placeholder(strm, rev_insns)
        end
      case(Some('}')):
        Stream::junk(strm)
        if(Stream::peek(strm) == Some('}')):
          parse_string(strm, '}', rev_insns)
        else:
          throw Illegal_format()
        end
      case(Some(c)):
        parse_string(strm, c, rev_insns)
      case(None()):
        List::rev(rev_insns)
      end
    end

    def parse_placeholder(strm, rev_insns):
      def loop(n):
        match(Stream::peek(strm)):
        case(Some(c))when(Char::digit?(c)):
          let i = Char::digit_to_int(c)
          Stream::junk(strm)
          loop(n * 10 + i)
        case(Some('}')):
          Stream::junk(strm)
          parse_format_insns(strm, [Placeholder(n), *rev_insns])
        case(Some(_) or None()):
          throw Illegal_format()
        end
      end
      loop(0)
    end

    def parse_string(strm, c, rev_insns):
      let buf = Buffer::create(initial_unformatted_buffer_size)
      Buffer::add_char(buf, c)
      Stream::junk(strm)
      def loop():
        match(Stream::peek(strm)):
        case(Some('{')):
          Stream::junk(strm)
          if(Stream::peek(strm) == Some('{')):
            Buffer::add_char(buf, '{')
            Stream::junk(strm)
            loop()
          else:
            parse_placeholder(strm, [String(Buffer::contents(buf)), *rev_insns])
          end
        case(Some('}')):
          Stream::junk(strm)
          if(Stream::peek(strm) == Some('}')):
            Buffer::add_char(buf, '}')
            Stream::junk(strm)
            loop()
          else:
            throw Illegal_format()
          end
        case(Some(c)):
          Buffer::add_char(buf, c)
          Stream::junk(strm)
          loop()
        case(None):
          List::rev([String(Buffer::contents(buf)), *rev_insns])
        end
      end
      loop()
    end

    def execute_format_insns(insns, args, buf):
      match(insns):
      case([]):
        Buffer::contents(buf)
      case([String(str), *insns]):
        Buffer::add_string(buf, str)
        execute_format_insns(insns, args, buf)
      case([Placeholder(n), *insns]):
        match(Args::get(args, n)):
        case(Some(arg)):
          Buffer::add_string(buf, arg.to_string)
        case(None()):
          throw Illegal_format
        end
        execute_format_insns(insns, args, buf)
      end
    end

    def f(str, *args):
      let insns = parse_format_insns(Stream::from_string(str), [])
      let buf = Buffer::create(initial_formatted_buffer_size)
      execute_format_insns(insns, args, buf)
    end

    export f
  end

  let format = Format::f

  def concat_map(lst, sep, proc):
    let buf = Buffer::create(64)
    match(lst):
    case([]):
      ()
    case([elem, *lst]):
      Buffer::add_string(buf, proc(elem))
      List::iter(lst)^(elem):
        Buffer::add_string(buf, sep)
        Buffer::add_string(buf, proc(elem))
      end
    end
    Buffer::contents(buf)
  end

  def concat(lst, sep):
    concat_map(lst, sep, id)
  end

  def sub(str, start, len):
    let buf = Buffer::create(64)
    def loop(n):
      if(n == len):
        Buffer::contents(buf)
      else:
        Buffer::add_char(buf, str[start + n])
        loop(n + 1)
      end
    end
    loop(0)
  end
  
  export C, get, length, contain?, format, concat_map, concat, sub
end

module Args:
  class C
  let get = Builtin::args_get
  export C, get
end

module Class:
  class C
  let of = Builtin::class_of
  export C, of
end

module Module:
  class C
  export C
end

module Proc:
  class C
  export C
end

module Exn:
  class C
  export C
end

module Ref:
  class C = make:
    mutable value
  end
  export C, make, C#value, C#(value=)
end

module Option:
  class C:
    def None()
    def Some(x)
  end

  def bind(m, proc):
    match(m):
    case(None()):
      None()
    case(Some(x)):
      proc(x)
    end
  end

  export C, None, Some, bind
end

module List:
  class C:
    def Nil()
    def Cons(x, xs)
  end

  let Nil = Nil()
  
  def fold_left(init, lst, proc):
    match(lst):
    case([]):
      init
    case([x, *xs]):
      fold_left(proc(init, x), xs, proc)
    end
  end

  def fold_right(lst, init, proc):
    match(lst):
    case([]):
      init
    case([x, *xs]):
      proc(x, fold_right(xs, init, proc))
    end
  end

  def append(lst1, lst2):
    fold_right(lst1, lst2)^(elem, acc):
      [elem, *acc]
    end
  end

  def rev(lst):
    fold_left([], lst)^(acc, elem):
      [elem, *acc]
    end
  end

  def find(lst, pred):
    match(lst):
    case([]):
      None()
    case([x, *_])when(pred(x)):
      Some(x)
    case([_, *xs]):
      find(xs, pred)
    end
  end

  def flatten(lst):
    fold_right(lst, [])^(elem, acc):
      append(elem, acc)
    end
  end

  def map(lst, proc):
    fold_right(lst, [])^(elem, acc):
      [proc(elem), *acc]
    end
  end

  def iter(lst, proc):
    fold_left((), lst)^((), elem):
      proc(elem)
    end
  end

  export C, Nil, Cons, fold_left, fold_right, append, rev, find, flatten, map, iter
end

module Hash:
  class C

  let create = Builtin::hash_create
  let get = Builtin::hash_get
  let add = Builtin::hash_add
  let remove = Builtin::hash_remove
  let keys = Builtin::hash_keys

  def set(self, key, value):
    remove(self, key)
    add(self, key, value)
  end

  def fold(init, hash, proc):
    List::fold_left(init, keys(hash))^(key):
      proc(init, key, hash[key])
    end
  end

  export C, create, get, add, remove, set, keys, fold
end

module Buffer:
  class C

  let create = Builtin::buffer_create
  let add_string = Builtin::buffer_add_string
  let contents = Builtin::buffer_contents

  def add_char(buf, c):
    add_string(buf, Builtin::char_to_string(c))
  end

  export C, create, add_string, add_char, contents
end

module Stream:
  class C = make:
    str
    len
    mutable idx
  end

  def from_string(str):
    make(str, String::length(str), 0)
  end

  def peek(stream):
    if(stream.idx >= stream.len):
      None()
    else:
      Some(stream.str[stream.idx])
    end
  end

  def junk(stream):
    stream.idx = stream.idx + 1
  end

  export C, from_string, peek, junk
end

trait DefaultEq(C):
  let C#(==) = Builtin::eq
  let C#(!=) = Builtin::ne
  export C#(==), C#(!=)
end

trait DefaultOrd(C):
  include DefaultEq(C)
  let C#(>) = Builtin::gt
  let C#(<) = Builtin::lt
  let C#(>=) = Builtin::ge
  let C#(<=) = Builtin::le
  let C#(<=>) = Builtin::compare
  export C#(>), C#(<), C#(>=), C#(<=), C#(<=>)
end

trait Eq(C, C#(==)):
  def C#(!=)(self, other){ !(self == other) }end
  export C#(==), C#(!=)
end

trait Ord(C, C#(<=>)):
  include Eq(C)^(self, other){ (self <=> other) == 0 }end
  def C#(>)(self, other){ (self <=> other) > 0 }end
  def C#(<)(self, other){ (self <=> other) < 0 }end
  def C#(>=)(self, other){ (self <=> other) >= 0 }end
  def C#(<=)(self, other){ (self <=> other) <= 0 }end
  export C#(>), C#(<), C#(>=), C#(<=), C#(<=>)
end

trait DefaultToString(C):
  let C#to_string = Builtin::show
  export C#to_string
end

module Pervasives:
  include DefaultOrd(Unit::C)
  include DefaultOrd(Bool::C)
  include DefaultOrd(Int::C)
  include DefaultOrd(Float::C)
  include DefaultOrd(Char::C)
  include DefaultOrd(String::C)
  include DefaultOrd(Args::C)
  include DefaultOrd(Ref::C)
  include DefaultOrd(Option::C)

  include DefaultEq(Class::C)
  include DefaultEq(Module::C)
  include DefaultEq(Proc::C)
  include DefaultEq(Exn::C)
  include DefaultEq(List::C)
  include DefaultEq(Hash::C)

  include DefaultToString(Unit::C)
  include DefaultToString(Bool::C)
  include DefaultToString(Int::C)
  include DefaultToString(Float::C)
  include DefaultToString(Args::C)
  include DefaultToString(Class::C)
  include DefaultToString(Module::C)
  include DefaultToString(Proc::C)
  include DefaultToString(Exn::C)
  include DefaultToString(Ref::C)
  include DefaultToString(Option::C)
  include DefaultToString(List::C)
  include DefaultToString(Hash::C)

  exception Invalid_argument(str)
  exception Not_found()
  exception Exit()

  def id(x):
    x
  end

  let None = Option::None
  let Some = Option::Some
  let ref = Ref::make
  let reset = Builtin::reset
  let shift = Builtin::shift

  def begin(thunk):
    thunk()
  end

  def if(cond, then_thunk, :else else_thunk=^{}):
    match(cond):
    case(true):
      then_thunk()
    case(false):
      else_thunk()
    end
  end

  def while(test_thunk, :do body_thunk):
    if(test_thunk()):
      body_thunk()
      while(test_thunk, :do body_thunk)
    end
  end

  def write_line(*args):
    Builtin::write_line(String::format(*args))
  end
  
  let read_line = Builtin::read_line

  def p(value):
    Builtin::write_line(Builtin::show(value))
  end

  let Bool::C#(!) = Builtin::bool_not

  let Int::C#(~-) = Builtin::int_minus
  let Int::C#(~+) = Builtin::int_plus
  let Int::C#(+) = Builtin::int_add
  let Int::C#(-) = Builtin::int_sub
  let Int::C#(*) = Builtin::int_mul
  let Int::C#(/) = Builtin::int_div
  let Int::C#(%) = Builtin::int_mod

  let Float::C#(~-) = Builtin::float_minus
  let Float::C#(~+) = Builtin::float_plus
  let Float::C#(+) = Builtin::float_add
  let Float::C#(-) = Builtin::float_sub
  let Float::C#(*) = Builtin::float_mul
  let Float::C#(/) = Builtin::float_div
  let Float::C#(**) = Builtin::float_pow
  
  let Char::C#to_string = Builtin::char_to_string

  def String::C#([])(self, index):
    match(String::get(self, index)):
    case(Some(c)):
      c
    case(None()):
      throw Invalid_argument("index out of bounds")
    end
  end
  def String::C#to_string(self):
    self
  end

  let Ref::C#value = Ref::(Ref::C#value)
  let Ref::C#(value=) = Ref::(Ref::C#(value=))
  
  def Hash::C#([])(self, key):
    match(Hash::get(self, key)):
    case(Some(c)):
      c
    case(None()):
      throw Not_found()
    end
  end
  let Hash::C#([]=) = Hash::set

  export Invalid_argument, Not_found, Exit
  export id, None, Some, ref, reset, shift, begin, if, while, write_line, read_line, p
  export Bool::C#(!)
  export Int::C#(+), Int::C#(-), Int::C#(*), Int::C#(/), Int::C#(%), Int::C#(~+), Int::C#(~-)
  export Float::C#(+), Float::C#(-), Float::C#(*), Float::C#(/), Float::C#(**)
  export Float::C#(~+), Float::C#(~-)
  export Char::C#to_string
  export String::C#to_string, String::C#([])
  export Ref::C#value, Ref::C#(value=)
  export Hash::C#([]), Hash::C#([]=)
end
open Pervasives
