
module PEG:
  class Expr:
    def MkExpr(proc)
  end

  class Result:
    def Success(pos, value)
    def Failure()
  end

  def parse(MkExpr(expr), str):
    expr(str, 0, Hash::create(16))
  end

  module Open:
    include DefaultEq(Result)
  end

  trait New():
    let nonterms = Hash::create(16)
    
    def def_nt(name, MkExpr(expr)):
      nonterms[name] = expr
    end

    def char(c):
      MkExpr^(str, pos, caches):
        if(pos < String::length(str) && str[pos] == c):
          Success(pos + 1, c)
        else:
          Failure()
        end
      end
    end

    def string(s):
      let len = String::length(s)
      MkExpr^(str, pos, caches):
        if(pos + len <= String::length(str) && String::sub(str, pos, len) == s):
          Success(pos + len, s)
        else:
          Failure()
        end
      end
    end

    def char_set(cs):
      MkExpr^(str, pos, caches):
        if(pos < String::length(str) && String::contain?(cs, str[pos])):
          Success(pos + 1, str[pos])
        else:
          Failure()
        end
      end
    end

    def nt_ref(name):
      MkExpr^(str, pos, caches):
        match(Hash::get(caches, (name, pos))):
        case(Some(result)):
          result
        case(None()):
          let result = nonterms[name](str, pos, caches)
          caches[(name, pos)] = result
          result
        end
      end
    end

    let fail = MkExpr^(str, pos, caches):
      Failure()
    end

    let no_op = MkExpr^(str, pos, caches):
      Success(pos, ())
    end

    def seq(MkExpr(expr1), MkExpr(expr2)):
      MkExpr^(str, pos, caches):
        match(expr1(str, pos, caches)):
        case(Success(pos, value)):
          expr2(str, pos, caches)
        case(Failure()):
          Failure()
        end
      end
    end

    def alt(MkExpr(expr1), MkExpr(expr2)):
      MkExpr^(str, pos, caches):
        match(expr1(str, pos, caches)):
        case(Success(pos, value)):
          Success(pos, value)
        case(Failure()):
          expr2(str, pos, caches)
        end
      end
    end

    def zero_or_more(MkExpr(expr)):
      MkExpr^(str, pos, caches):
        def loop(rev_values, pos):
          match(expr(str, pos, caches)):
          case(Success(pos, value)):
            loop([value, *rev_values], pos)
          case(Failure()):
            Success(pos, List::rev(rev_values))
          end
        end
        loop([], pos)
      end
    end

    def not(MkExpr(expr)):
      MkExpr^(str, pos, caches):
        match(expr(str, pos, caches)):
        case(Success(pos, value)):
          Failure()
        case(Failure()):
          Success(pos, ())
        end
      end
    end

    def return(value):
      MkExpr^(str, pos, caches):
        Success(pos, value)
      end
    end

    def bind(MkExpr(expr), proc):
      MkExpr^(str, pos, caches):
        match(expr(str, pos, caches)):
        case(Success(pos, value)):
          let MkExpr(expr) = proc(value)
          expr(str, pos, caches)
        case(Failure()):
          Failure()
        end
      end
    end

    def one_or_more(expr):
      bind(expr)^(value):
        bind(zero_or_more(expr))^(values):
          return([value, *values])
        end
      end
    end

    def zero_or_one(expr):
      alt(expr, no_op)
    end

    def and(expr):
      not(not(expr))
    end

    let String::C#(<-) = def_nt
    let Expr#(&+) = seq
    let Expr#(|+) = alt

    export def_nt, char, string, char_set, nt_ref, fail, no_op, seq, alt, zero_or_more, not
    export return, bind, one_or_more, zero_or_one, and
    export String::C#(<-), Expr#(&+), Expr#(|+)
  end

  export Open, New, parse, Success, Failure
end

open PEG::Open

let s = begin:
  open PEG::New()
  
  "S" <- and(nt_ref("A") &+ char('c'))
      &+ one_or_more(char('a'))
      &+ nt_ref("B")
      &+ not(char('a') |+ char('b') |+ char('c'))

  "A" <- char('a')
      &+ zero_or_one(nt_ref("A"))
      &+ char('b')

  "B" <- char('b')
      &+ zero_or_one(nt_ref("B"))
      &+ char('c')

  nt_ref("S")
end

assert(PEG::parse(s, "")          == PEG::Failure())

assert(PEG::parse(s, "a")         == PEG::Failure())
assert(PEG::parse(s, "b")         == PEG::Failure())
assert(PEG::parse(s, "c")         == PEG::Failure())

assert(PEG::parse(s, "aa")        == PEG::Failure())
assert(PEG::parse(s, "ab")        == PEG::Failure())
assert(PEG::parse(s, "ac")        == PEG::Failure())
assert(PEG::parse(s, "bb")        == PEG::Failure())
assert(PEG::parse(s, "bc")        == PEG::Failure())
assert(PEG::parse(s, "cc")        == PEG::Failure())

assert(PEG::parse(s, "aaa")       == PEG::Failure())
assert(PEG::parse(s, "aab")       == PEG::Failure())
assert(PEG::parse(s, "aac")       == PEG::Failure())
assert(PEG::parse(s, "abb")       == PEG::Failure())
assert(PEG::parse(s, "abc")       == PEG::Success(3, ()))
assert(PEG::parse(s, "acc")       == PEG::Failure())
assert(PEG::parse(s, "bbb")       == PEG::Failure())
assert(PEG::parse(s, "bbc")       == PEG::Failure())
assert(PEG::parse(s, "bcc")       == PEG::Failure())
assert(PEG::parse(s, "ccc")       == PEG::Failure())

assert(PEG::parse(s, "aaaa")      == PEG::Failure())
assert(PEG::parse(s, "aaab")      == PEG::Failure())
assert(PEG::parse(s, "aaac")      == PEG::Failure())
assert(PEG::parse(s, "aabb")      == PEG::Failure())
assert(PEG::parse(s, "aabc")      == PEG::Failure())
assert(PEG::parse(s, "aacc")      == PEG::Failure())
assert(PEG::parse(s, "abbb")      == PEG::Failure())
assert(PEG::parse(s, "abbc")      == PEG::Failure())
assert(PEG::parse(s, "abcc")      == PEG::Failure())
assert(PEG::parse(s, "accc")      == PEG::Failure())
assert(PEG::parse(s, "bbbb")      == PEG::Failure())
assert(PEG::parse(s, "bbbc")      == PEG::Failure())
assert(PEG::parse(s, "bbcc")      == PEG::Failure())
assert(PEG::parse(s, "bccc")      == PEG::Failure())
assert(PEG::parse(s, "cccc")      == PEG::Failure())

assert(PEG::parse(s, "aaaaa")     == PEG::Failure())
assert(PEG::parse(s, "aaaab")     == PEG::Failure())
assert(PEG::parse(s, "aaaac")     == PEG::Failure())
assert(PEG::parse(s, "aaabb")     == PEG::Failure())
assert(PEG::parse(s, "aaabc")     == PEG::Failure())
assert(PEG::parse(s, "aaacc")     == PEG::Failure())
assert(PEG::parse(s, "aabbb")     == PEG::Failure())
assert(PEG::parse(s, "aabbc")     == PEG::Failure())
assert(PEG::parse(s, "aabcc")     == PEG::Failure())
assert(PEG::parse(s, "aaccc")     == PEG::Failure())
assert(PEG::parse(s, "abbbb")     == PEG::Failure())
assert(PEG::parse(s, "abbbc")     == PEG::Failure())
assert(PEG::parse(s, "abbcc")     == PEG::Failure())
assert(PEG::parse(s, "abccc")     == PEG::Failure())
assert(PEG::parse(s, "acccc")     == PEG::Failure())
assert(PEG::parse(s, "bbbbb")     == PEG::Failure())
assert(PEG::parse(s, "bbbbc")     == PEG::Failure())
assert(PEG::parse(s, "bbbcc")     == PEG::Failure())
assert(PEG::parse(s, "bbccc")     == PEG::Failure())
assert(PEG::parse(s, "bcccc")     == PEG::Failure())
assert(PEG::parse(s, "ccccc")     == PEG::Failure())

assert(PEG::parse(s, "aaaaaa")    == PEG::Failure())
assert(PEG::parse(s, "aaaaab")    == PEG::Failure())
assert(PEG::parse(s, "aaaaac")    == PEG::Failure())
assert(PEG::parse(s, "aaaabb")    == PEG::Failure())
assert(PEG::parse(s, "aaaabc")    == PEG::Failure())
assert(PEG::parse(s, "aaaacc")    == PEG::Failure())
assert(PEG::parse(s, "aaabbb")    == PEG::Failure())
assert(PEG::parse(s, "aaabbc")    == PEG::Failure())
assert(PEG::parse(s, "aaabcc")    == PEG::Failure())
assert(PEG::parse(s, "aaaccc")    == PEG::Failure())
assert(PEG::parse(s, "aabbbb")    == PEG::Failure())
assert(PEG::parse(s, "aabbbc")    == PEG::Failure())
assert(PEG::parse(s, "aabbcc")    == PEG::Success(6, ()))
assert(PEG::parse(s, "aabccc")    == PEG::Failure())
assert(PEG::parse(s, "aacccc")    == PEG::Failure())
assert(PEG::parse(s, "abbbbb")    == PEG::Failure())
assert(PEG::parse(s, "abbbbc")    == PEG::Failure())
assert(PEG::parse(s, "abbbcc")    == PEG::Failure())
assert(PEG::parse(s, "abbccc")    == PEG::Failure())
assert(PEG::parse(s, "abcccc")    == PEG::Failure())
assert(PEG::parse(s, "accccc")    == PEG::Failure())
assert(PEG::parse(s, "bbbbbb")    == PEG::Failure())
assert(PEG::parse(s, "bbbbbc")    == PEG::Failure())
assert(PEG::parse(s, "bbbbcc")    == PEG::Failure())
assert(PEG::parse(s, "bbbccc")    == PEG::Failure())
assert(PEG::parse(s, "bbcccc")    == PEG::Failure())
assert(PEG::parse(s, "bccccc")    == PEG::Failure())
assert(PEG::parse(s, "cccccc")    == PEG::Failure())

assert(PEG::parse(s, "aaabbbccc") == PEG::Success(9, ()))
assert(PEG::parse(s, "abca")      == PEG::Failure())

def digits_to_int(digits):
  List::fold_left(0, digits)^(n, digit):
    n * 10 + Char::digit_to_int(digit)
  end
end

let e1 = begin:
  open PEG::New()
  open Reflect(bind)

  "E" <- reset:
           let (v1, s1) = reflect(nt_ref("T"))
           let (v2, s2) = reflect(char('+') &+ nt_ref("E"))
           return((v1 + v2, String::format("({0} + {1})", s1, s2)))
         end
      |+ nt_ref("T")

  "T" <- reset:
           let (v1, s1) = reflect(nt_ref("P"))
           let (v2, s2) = reflect(char('*') &+ nt_ref("T"))
           return((v1 * v2, String::format("({0} * {1})", s1, s2)))
         end
      |+ nt_ref("P")

  "P" <- reset:
           let digits = reflect(one_or_more(char_set("0123456789")))
           return((digits_to_int(digits), String::concat_map(digits, "", Char::C#to_string)))
         end
      |+ reset:
           let (v, s)  = reflect(char('(') &+ nt_ref("E"))
           char(')') &+ return((v, s))
         end

  nt_ref("E")
end

assert(PEG::parse(e1, "123")     == PEG::Success(3, (123, "123")))
assert(PEG::parse(e1, "1+2*3")   == PEG::Success(5, (7, "(1 + (2 * 3))")))
assert(PEG::parse(e1, "(1+2)*3") == PEG::Success(7, (9, "((1 + 2) * 3)")))
assert(PEG::parse(e1, "1+2+3")   == PEG::Success(5, (6, "(1 + (2 + 3))")))
assert(PEG::parse(e1, "1*2*3")   == PEG::Success(5, (6, "(1 * (2 * 3))")))

let e2 = begin:
  open PEG::New()
  open Reflect(bind)

  def chainl1(e, op):
    def rest(x):
      reset:
        let f = reflect(op)
        let y = reflect(e)
        rest(f(x, y))
      end
        |+ return(x)
    end
    reset:
      let x = reflect(e)
      rest(x)
    end
  end

  "E" <- begin:
           let op = char('+') &+ return^((v1, s1), (v2, s2)):
             (v1 + v2, String::format("({0} + {1})", s1, s2))
           end
           chainl1(nt_ref("T"), op)
         end

  "T" <- begin:
           let op = char('*') &+ return^((v1, s1), (v2, s2)):
             (v1 * v2, String::format("({0} * {1})", s1, s2))
           end
           chainl1(nt_ref("P"), op)
         end

  "P" <- reset:
           let digits = reflect(one_or_more(char_set("0123456789")))
           return((digits_to_int(digits), String::concat_map(digits, "", Char::C#to_string)))
         end
      |+ reset:
           let (v, s)  = reflect(char('(') &+ nt_ref("E"))
           char(')') &+ return((v, s))
         end

  nt_ref("E")
end

assert(PEG::parse(e2, "123")     == PEG::Success(3, (123, "123")))
assert(PEG::parse(e2, "1+2*3")   == PEG::Success(5, (7, "(1 + (2 * 3))")))
assert(PEG::parse(e2, "(1+2)*3") == PEG::Success(7, (9, "((1 + 2) * 3)")))
assert(PEG::parse(e2, "1+2+3")   == PEG::Success(5, (6, "((1 + 2) + 3)")))
assert(PEG::parse(e2, "1*2*3")   == PEG::Success(5, (6, "((1 * 2) * 3)")))
