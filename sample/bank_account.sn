
trait Account(C, C#balance, C#(balance=)):
  def C#deposit!(self, x):
    self.balance = self.balance + x
  end

  def C#withdraw!(self, x):
    self.balance = self.balance - x
    if(self.balance < 0):
      self.balance = 0
    end
  end

  export C#deposit!, C#withdraw!
end

class BankAccount = make_bank_account:
  mutable balance
end

open Account(BankAccount, BankAccount#balance, BankAccount#(balance=))

def create_bank_account():
  make_bank_account(0)
end

let account = create_bank_account()

account.balance = 200
assert(account.balance == 200)
account.deposit!(50)
assert(account.balance == 250)
account.withdraw!(100)
assert(account.balance == 150)
account.withdraw!(200)
assert(account.balance == 0)

class StockAccount = make_stock_account:
  mutable num_shares
  price_per_share
end

def StockAccount#balance(self):
  self.num_shares * self.price_per_share
end

def StockAccount#(balance=)(self, x):
  self.num_shares = x / self.price_per_share
end

open Account(StockAccount, StockAccount#balance, StockAccount#(balance=))

def create_stock_account():
  make_stock_account(10, 30)
end

let stock = create_stock_account()

assert(stock.num_shares == 10)
assert(stock.price_per_share == 30)
assert(stock.balance == 300)
stock.balance = 150
assert(stock.num_shares == 5)

stock.balance = 600
assert(stock.balance == 600)
assert(stock.num_shares == 20)
stock.deposit!(60)
assert(stock.balance == 660)
assert(stock.num_shares == 22)
